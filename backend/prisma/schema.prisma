generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  role             UserRole  @default(SALES_REP)
  department       String?
  phone            String?
  isActive         Boolean   @default(true)
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  managedCustomers Customer[] @relation("AccountManager")
  createdCustomers Customer[] @relation("CreatedBy")
  activities       Activity[]
  tasks            Task[]
  notifications    Notification[]
  sessions         Session[]
  projects         ProjectMember[]
  
  @@index([email])
  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Customer Management
model Customer {
  id                String         @id @default(uuid())
  companyName       String
  industry          String?
  size              CompanySize?
  website           String?
  accountManagerId  String?
  status            CustomerStatus @default(PROSPECT)
  lifecycleStage    String         @default("lead")
  score             Int            @default(0)
  createdById       String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  accountManager User?       @relation("AccountManager", fields: [accountManagerId], references: [id])
  createdBy      User        @relation("CreatedBy", fields: [createdById], references: [id])
  contacts       Contact[]
  opportunities  Opportunity[]
  activities     Activity[]
  tasks          Task[]
  documents      Document[]
  projects       Project[]
}

model Contact {
  id         String   @id @default(uuid())
  customerId String
  firstName  String
  lastName   String
  email      String
  phone      String?
  mobile     String?
  position   String?
  department String?
  isPrimary  Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  customer     Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  activities   Activity[]
  opportunities Opportunity[]
}

// Sales Pipeline
model Opportunity {
  id           String           @id @default(uuid())
  customerId   String
  contactId    String?
  title        String
  description  String?
  stage        OpportunityStage @default(QUALIFYING)
  amount       Float?
  probability  Int              @default(0)
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  status       OpportunityStatus @default(OPEN)
  lostReason   String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  // Relations
  customer   Customer   @relation(fields: [customerId], references: [id])
  contact    Contact?   @relation(fields: [contactId], references: [id])
  activities Activity[]
  tasks      Task[]
  products   OpportunityProduct[]
}

model OpportunityProduct {
  id            String      @id @default(uuid())
  opportunityId String
  productId     String
  quantity      Int
  unitPrice     Float
  discount      Float       @default(0)
  totalPrice    Float
  
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String?
  unitPrice   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  opportunities OpportunityProduct[]
}

// Activity Tracking
model Activity {
  id           String       @id @default(uuid())
  type         ActivityType
  subject      String
  description  String?
  customerId   String?
  contactId    String?
  opportunityId String?
  userId       String
  startTime    DateTime
  endTime      DateTime?
  outcome      String?
  nextAction   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  customer    Customer?    @relation(fields: [customerId], references: [id])
  contact     Contact?     @relation(fields: [contactId], references: [id])
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
}

// Task Management
model Task {
  id           String     @id @default(uuid())
  title        String
  description  String?
  priority     Priority   @default(MEDIUM)
  status       TaskStatus @default(PENDING)
  dueDate      DateTime?
  customerId   String?
  opportunityId String?
  assignedToId String
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  customer    Customer?    @relation(fields: [customerId], references: [id])
  opportunity Opportunity? @relation(fields: [opportunityId], references: [id])
  assignedTo  User         @relation(fields: [assignedToId], references: [id])
}

// Project Management
model Project {
  id            String    @id @default(uuid())
  code          String    @unique
  name          String
  customerId    String
  description   String?
  startDate     DateTime
  endDate       DateTime
  budget        Float?
  status        ProjectStatus @default(PLANNING)
  priority      Priority  @default(MEDIUM)
  progress      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  customer      Customer  @relation(fields: [customerId], references: [id])
  members       ProjectMember[]
  milestones    Milestone[]
  
  @@index([code])
  @@index([customerId])
  @@map("projects")
}

model ProjectMember {
  id          String   @id @default(uuid())
  projectId   String
  userId      String
  role        String
  allocation  Int      @default(100)
  joinedAt    DateTime @default(now())
  
  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
  
  @@unique([projectId, userId])
  @@map("project_members")
}

model Milestone {
  id          String   @id @default(uuid())
  projectId   String
  name        String
  description String?
  dueDate     DateTime
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("milestones")
}

// Document Management
model Document {
  id         String       @id @default(uuid())
  customerId String
  name       String
  type       DocumentType
  url        String
  size       Int
  uploadedBy String
  createdAt  DateTime     @default(now())
  
  customer Customer @relation(fields: [customerId], references: [id])
}

// Notifications
model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  SALES_REP
  SUPPORT
  VIEWER
}

enum CustomerStatus {
  PROSPECT
  ACTIVE
  INACTIVE
  CHURNED
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum OpportunityStage {
  QUALIFYING
  NEEDS_ANALYSIS
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum OpportunityStatus {
  OPEN
  WON
  LOST
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  DEMO
  PROPOSAL
  FOLLOW_UP
  NOTE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentType {
  CONTRACT
  PROPOSAL
  INVOICE
  REPORT
  OTHER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}